<?php

namespace AppBundle\Entity;
use Doctrine\ORM\Query\ResultSetMapping;
/**
 * BreakdownRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BreakdownRepository extends \Doctrine\ORM\EntityRepository
{

    public function findLast($n = 10){
        return $this->createQueryBuilder('e')->
        orderBy('e.created', 'DESC')->
        setMaxResults($n)->
        getQuery()->
        getResult();

    }

        /*
         *
         */
    public function AnalyzerTimeline(){

        $sql = "SELECT
    b.id AS idField,
    b.start AS startField,
    b.stop AS endField,
    CONCAT(COALESCE(GROUP_CONCAT(d1.label), 'no element'),
            ' | ',
            COALESCE(GROUP_CONCAT(d2.label), 'no status'),
            ' > ',
            COALESCE(GROUP_CONCAT(d3.label), 'no action'),
            ' ~ ',
            COALESCE(GROUP_CONCAT(d4.label), 'no contributor')) as valueField
FROM
    breakdown b
        LEFT JOIN
    breakdowns_descriptors bd ON bd.breakdown_id = b.id
        LEFT JOIN
    descriptor d1 ON bd.descriptor_id = d1.id
        AND d1.category = 1
        LEFT JOIN
    descriptor d2 ON bd.descriptor_id = d2.id
        AND d2.category = 2
        LEFT JOIN
    descriptor d3 ON bd.descriptor_id = d3.id
        AND d3.category = 3
        LEFT JOIN
    descriptor d4 ON bd.descriptor_id = d4.id
        AND d4.category = 4
WHERE
    b.closed = 1
GROUP BY b.id";


        $em = $this->getEntityManager();
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('idField', 'idField');
        $rsm->addScalarResult('startField', 'startField');
        $rsm->addScalarResult('endField', 'endField');
        $rsm->addScalarResult('valueField', 'valueField');

        $query = $em->createNativeQuery($sql, $rsm);



        return $query->getScalarResult();
    }

    public function OperatorTimeline(){

        $sql = "SELECT
    b.id AS idField,
    b.start AS startField,
    b.stop AS endField,
    CONCAT(COALESCE(GROUP_CONCAT(d1.label), '[ no element ]'),
            ' | ',
            COALESCE(GROUP_CONCAT(d2.label), '[ no status ]'),
            ' > ',
            COALESCE(GROUP_CONCAT(d3.label), '[ no action ]'),
            ' ~ ',
            COALESCE(GROUP_CONCAT(d4.label), '[ no contributor ]')) as valueField
FROM
    breakdown b
        LEFT JOIN
    breakdowns_descriptors bd ON bd.breakdown_id = b.id
        LEFT JOIN
    descriptor d1 ON bd.descriptor_id = d1.id
        AND d1.category = 1
        LEFT JOIN
    descriptor d2 ON bd.descriptor_id = d2.id
        AND d2.category = 2
        LEFT JOIN
    descriptor d3 ON bd.descriptor_id = d3.id
        AND d3.category = 3
        LEFT JOIN
    descriptor d4 ON bd.descriptor_id = d4.id
        AND d4.category = 4

GROUP BY b.id";


        $em = $this->getEntityManager();
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('idField', 'idField');
        $rsm->addScalarResult('startField', 'startField');
        $rsm->addScalarResult('endField', 'endField');
        $rsm->addScalarResult('valueField', 'valueField');

        $query = $em->createNativeQuery($sql, $rsm);



        return $query->getScalarResult();
    }



    /*
     *
     */

    public function findSequenceOfDescriptorByDescriptors( $descriptors = array()){

        if(count($descriptors) == 0){return false;}

        $sql = "SELECT * FROM (

SELECT
    rFindScoredBreakdown.breakdown_id,
    CONCAT(
		COALESCE(GROUP_CONCAT((SELECT label FROM descriptor WHERE category=1 AND id=D.id)),'ø'),' | ',
        COALESCE(GROUP_CONCAT((SELECT label FROM descriptor WHERE category=2 AND id=D.id)),'ø'),' > ',
        COALESCE(GROUP_CONCAT((SELECT label FROM descriptor WHERE category=3 AND id=D.id)),'ø'),' # ',
        COALESCE(GROUP_CONCAT((SELECT label FROM descriptor WHERE category=4 AND id=D.id)),'ø')
        ) as sequence,
        GROUP_CONCAT((SELECT id FROM descriptor WHERE id=D.id)) as descriptorList,
        GROUP_CONCAT((SELECT id FROM descriptor WHERE category=1 AND id=D.id)) as elementList,
        GROUP_CONCAT((SELECT id FROM descriptor WHERE category=2 AND id=D.id)) as statusList,
        GROUP_CONCAT((SELECT id FROM descriptor WHERE category=3 AND id=D.id)) as actionList,
        GROUP_CONCAT((SELECT id FROM descriptor WHERE category=4 AND id=D.id)) as contributorList,
    round(rFindScoredBreakdown.score /
    (1 + LENGTH(:descriptorIds) - LENGTH(REPLACE(:descriptorIds, ',', ''))),1) as score
FROM
    (SELECT
        B.id AS breakdown_id, COUNT(B.id) AS score
    FROM
        breakdown B
    LEFT JOIN breakdowns_descriptors BD ON BD.breakdown_id = B.id
    LEFT JOIN descriptor D ON D.id = BD.descriptor_id
    WHERE
        FIND_IN_SET(D.id, :descriptorIds)
    GROUP BY B.id
    ORDER BY score DESC
    LIMIT 10) AS rFindScoredBreakdown
        LEFT JOIN
    breakdowns_descriptors BD ON BD.breakdown_id = rFindScoredBreakdown.breakdown_id
        LEFT JOIN
    descriptor D ON D.id = BD.descriptor_id
GROUP BY rFindScoredBreakdown.breakdown_id

) rToFindDescriptors

group by elementList,statusList,actionList,contributorList
order by rToFindDescriptors.score desc

;";


        $em = $this->getEntityManager();
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('sequence', 'sequence');
        $rsm->addScalarResult('descriptorList', 'descriptorList');
        $rsm->addScalarResult('score', 'score');

        $query = $em->createNativeQuery($sql, $rsm);

        $query->setParameter('descriptorIds', (is_array($descriptors) && count($descriptors) > 0 ) ?  implode(',',$descriptors) : '' );

        return $query->getScalarResult();
    }




    public function nodes($breakdown)
    {
        $sql = "
          SELECT
            d.id as idField,
            d.label as labelField,
            d.category as categoryField,
            1 as valueField
          FROM breakdown b
            LEFT JOIN breakdowns_descriptors bd ON bd.breakdown_id = b.id
            LEFT JOIN descriptor d ON bd.descriptor_id = d.id
          WHERE b.id = :id
          ";
        $em = $this->getEntityManager();
        $rsm = new ResultSetMapping;
        $rsm->addScalarResult('idField', 'idField');
        $rsm->addScalarResult('labelField', 'labelField');
        $rsm->addScalarResult('categoryField', 'categoryField');
        $rsm->addScalarResult('valueField', 'valueField');

        $query = $em->createNativeQuery($sql, $rsm);


        $query->setParameter('id', $breakdown->getId());

        return $query->getScalarResult();
    }

}
