{% extends "base.html.twig" %}
{% block body %}

    <div class="row">
        <div class="col-lg-12">
            <h1>
                Tree & Bar chart
            </h1>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <h3>
                Filters
            </h3>
            <form class="form" method="get" action="" name="descriptorTree_filter" id="descriptorTree_filter">

                <div id="formErrors">
                    {{ form_errors(form.category) }}
                    {{ form_errors(form.start) }}
                    {{ form_errors(form.stop) }}
                    {{ form_errors(form.minDuration) }}
                    {{ form_errors(form.maxDuration) }}
                    {{ form_errors(form.timePonderation) }}
                    {{ form_errors(form.timePonderation) }}
                    {{ form_errors(form.interferoPonderation) }}
                </div>

                <div class="row">
                    <div class="col-lg-4">
                        <div class="filterBoxField">
                            {{ form_label(form.category) }}
                            {{ form_widget(form.category) }}
                        </div>
                        <div class="filterBoxField" id="filterBoxField-ponderation">
                            {{ form_label(form.timePonderation) }}
                            {{ form_widget(form.timePonderation) }}
                            <br/>
                            {{ form_label(form.interferoPonderation) }}
                            {{ form_widget(form.interferoPonderation) }}
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="filterBoxField" id="filterBoxField-start">
                            {{ form_label(form.start) }}
                            {{ form_widget(form.start) }}
                        </div>
                        <div class="filterBoxField" id="filterBoxField-stop">
                            {{ form_label(form.stop) }}
                            {{ form_widget(form.stop) }}
                        </div>
                    </div>
                    <div class="col-lg-4">

                        <div class="filterBoxField" id="filterBoxField-duration">
                            {{ form_label(form.durationUnity) }}
                            {{ form_widget(form.durationUnity) }}
                            {{ form_label(form.minDuration) }}
                            {{ form_widget(form.minDuration) }}
                            {{ form_label(form.maxDuration) }}
                            {{ form_widget(form.maxDuration) }}
                        </div>
                    </div>
                </div>





                {{ form_rest(form) }}
                <button class="btn btn-default" id="descriptorTree_filter_submit" type="submit" name="submit-filter" value="apply-filter" >
                    <i class="glyphicon glyphicon-search"></i>search breakdowns
                </button>
            </form>
        </div>
    </div>

    <h3>Found nodes in {{ breakdowns|length }} breakdowns</h3>


    {#
<div class="row">
    <div class="col-lg-12">
        <h3>Found nodes in {{ breakdowns|length }} breakdowns</h3>
        <ul class="list-inline" id="descriptorResultsList">
            {% for breakdown in breakdowns %}
            <li breakdonwnId="{{ breakdown }}">
                <a href="{{ path('operator_breakdown_show', { 'id': breakdown }) }}">
                    #{{ breakdown }}
                </a>
             </li>
            {% endfor %}
        </ul>
    </div>
</div>
#}


    <div class="row">
        <div class="col-lg-6" >
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">Tree</h3>
                </div>
                <div class="panel-body" id="mynetwork">
                </div>
            </div>
        </div>
        <div class="col-lg-6" >
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">Bars</h3>
                </div>
                <div class="panel-body">
                    <canvas id="myChart" height="300"  ></canvas>
                </div>
            </div>

        </div>
    </div>

    <div class="row">
        <div class="col-lg-12">

            <table class="table">
                <thead>
                <tr>
                    <th>descriptor</th>
                    <th>occurance ratio (%)</th>
                    <th>length ratio (%)</th>
                    <th>tot breakdown</th>
                    <th>breakdowns</th>
                </tr>
                </thead>
                <tbody>
                {% for descriptor in descriptors2 %}
                    <tr>
                        <td>{{ descriptor.label }}</td>

                        <td>{{ descriptor.breakdownOccuranceRatio }}%</td>
                        <td>{{ descriptor.breakdownLengthRatio }}%</td>
                        <td>{{ descriptor.breakdownCount }}</td>
                        <td>

                            <ul class="list-inline" id="descriptorResultsList">
                                {% set breakdowns = descriptor.breakdownsList|split(',') %}
                                {% for breakdown in breakdowns %}
                                    <li breakdonwnId="{{ breakdown }}">
                                        <a href="{{ path('operator_breakdown_show', { 'id': breakdown }) }}">
                                            #{{ breakdown }}
                                        </a>
                                    </li>
                                {% endfor %}
                            </ul>
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
    </div>


    <script>

        $("#descriptorResultsList").find('li').each(function(){

            var myUrl = '{{ path('operator_ajax_breakdown_show', { 'id': 'xxxx' }) }}';
            var url = myUrl.replace( "xxxx",$(this).attr('breakdonwnId') );

            $(this).balloon({
                html: true, position: 'right',
                contents: '<img src="{{ asset('bundles/manager/images/balloon-sample-loading.gif') }}" alt="loading..." width="16" height="16">',
                url:url
            });
        });


        function drawBarChart(descriptors,data1Label,data2Label) {
            var labels = [],data=[], data1 =[],data2=[];
            descriptors.forEach(function(o) {
                labels.push(o.label);
                data.push( parseFloat(o.value) );
                data1.push( parseFloat(o.value1) );
                data2.push( parseFloat(o.value2) );

            });


            var chartData = {
                labels : labels,
                hoverMode: 'label',
                hoverAnimationDuration: 400,
                stacked: false,
                title:{
                    display:true,
                    text:"Descriptors in breakdowns"
                },
                datasets : [{
                    label: data1Label,
                    yAxisID: "y-axis-1",
                    backgroundColor: "rgba(220,220,220,0.5)",
                    data                  : data1
                },{
                    label: data2Label,
                    yAxisID: "y-axis-2",
                    backgroundColor: "rgba(151,187,55,0.5)",
                    data                  : data2
                }]
            };


            var ctx = document.getElementById("myChart").getContext("2d");
            window.myBar = Chart.Bar(ctx, {
                data: chartData,
                options: {
                    responsive: true,
                    hoverMode: 'label',
                    hoverAnimationDuration: 400,
                    stacked: false,
                    title:{
                        display:true,
                        text:"Descriptors used in breakdowns"
                    },
                    scales: {
                        yAxes: [{
                            ticks: {
                                min: 0,
                            },
                            type: "linear", // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                            display: true,
                            position: "left",
                            id: "y-axis-1",
                        }, {
                            ticks: {
                                min: 0,
                            },
                            type: "linear", // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                            display: true,
                            position: "right",
                            id: "y-axis-2",
                            gridLines: {
                                drawOnChartArea: false
                            }
                        }],
                    }
                }
            });

        }





        {% if descriptors is not null %}

        JSONDesriptors = '{{ descriptors }}';


        if($("#descriptorTree_filter_timePonderation option[selected=selected]").val() == 'on'){
            data1Label = "pondered by breakdown length (%)";
            data2Label = "descriptor occurrence in breakdown(nbr)";
            descriptors = JSON.parse(JSONDesriptors.replace(/&quot;/g, '\"').replace(/breakdownLengthRatio/g,'value1').replace(/breakdownCount/g,'value2'));
        }else{
            data1Label = "descriptor occurrence in breakdown (nbr)";
            data2Label = "pondered by breakdown length (%)";
            descriptors = JSON.parse(JSONDesriptors.replace(/&quot;/g, '\"').replace(/breakdownCount/g,'value1').replace(/breakdownLengthRatio/g,'value2'));
        }

        drawBarChart(descriptors,data1Label,data2Label);


        {% endif %}
        {% if nodes is not null %}

        JSONNodes = '{{ nodes }}';
        JSONEdges = '{{ edges }}';

        if($("#descriptorTree_filter_timePonderation option[selected=selected]").val() == 'on'){

            nodes = JSON.parse(JSONNodes.replace(/&quot;/g, '\"').replace(/idField/g,'id').replace(/breakdownLengthRatio/g,'value').replace(/categoryField/g,'group').replace(/labelField/g,'label'));
        }else{

            nodes = JSON.parse(JSONNodes.replace(/&quot;/g, '\"').replace(/idField/g,'id').replace(/valueField/g,'value').replace(/categoryField/g,'group').replace(/labelField/g,'label'));
        }


        draw(
                nodes,
                JSON.parse(JSONEdges.replace(/&quot;/g, '\"').replace(/fromField/g,'from').replace(/toField/g,'to').replace(/valueField/g,'value'))
        );
        {% endif %}

        setDateRangePicker('descriptorTree_filter','dateRange','descriptorTree_filter_start','descriptorTree_filter_stop');






    </script>



{% endblock %}
