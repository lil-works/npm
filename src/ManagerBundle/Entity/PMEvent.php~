<?php

namespace ManagerBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;

/**
 * PMEvent
 *
 * @ORM\Table()
 * @ORM\Entity(repositoryClass="ManagerBundle\Entity\PMEventRepository")
 * @ORM\HasLifecycleCallbacks()
 */
class PMEvent
{


    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;


    /**
     * @var datetime
     *
     * @ORM\Column(name="created", type="datetime")
     */
    private $created;


    /**
     * @var datetime
     *
     * @ORM\Column(name="start", type="datetime",nullable=true)
     */
    private $start;

    /**
     * @var datetime
     *
     * @ORM\Column(name="stop", type="datetime",nullable=true)
     */
    private $stop;

    /**
     * @var boolean
     *
     * @ORM\Column(name="notFinished", type="boolean",nullable=true)
     */
    private $notFinished;

    /**
     * @var string
     *
     * @ORM\Column(name="createdBy", type="text",nullable=true)
     */
    private $createdBy;

    /**
     * @var datetime
     *
     * @ORM\Column(name="description", type="text",nullable=true)
     */
    private $description;

    /**
     * @ORM\OneToMany(targetEntity="PMEventsCurrentArrays", mappedBy="event", cascade={"persist", "remove"}, orphanRemoval=TRUE)
     */
    protected $events_currentArrays;


    /**
     * @ORM\ManyToOne(targetEntity="PMSeq")
     * @ORM\JoinColumn(name="seq", referencedColumnName="id")
     */
    protected $seq;

    /**
     * @ORM\ManyToOne(targetEntity="PMStatus")
     * @ORM\JoinColumn(name="status", referencedColumnName="id")
     */
    protected $status;

    /**
     * @ORM\ManyToOne(targetEntity="PMAction")
     * @ORM\JoinColumn(name="action", referencedColumnName="id")
     */
    protected $action;

    /**
     * @ORM\OneToMany(targetEntity="PMEventsContributors", mappedBy="event", cascade={"persist", "remove" }, orphanRemoval=TRUE)
     */
    protected $events_contributors;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->created = new \DateTime();
    }



    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set created
     *
     * @param \DateTime $created
     *
     * @return PMEvent
     */
    public function setCreated($created)
    {
        $this->created = $created;

        return $this;
    }

    /**
     * Get created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }

    /**
     * Set start
     *
     * @param \DateTime $start
     *
     * @return PMEvent
     */
    public function setStart($start)
    {
        $this->start = $start;

        return $this;
    }

    /**
     * Get start
     *
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->start;
    }

    /**
     * Set stop
     *
     * @param \DateTime $stop
     *
     * @return PMEvent
     */
    public function setStop($stop)
    {
        $this->stop = $stop;

        return $this;
    }

    /**
     * Get stop
     *
     * @return \DateTime
     */
    public function getStop()
    {
        return $this->stop;
    }

    /**
     * Set description
     *
     * @param string $description
     *
     * @return PMEvent
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Add eventsCurrentArray
     *
     * @param \ManagerBundle\Entity\PMCurrentArray $currentArray
     *
     * @return PMEvent
     */
    public function addEventsCurrentArray(\ManagerBundle\Entity\PMCurrentArray $eventsCurrentArray)
    {
        $this->events_currentArrays[] = $eventsCurrentArray;

        return $this;
    }

    /**
     * Remove eventsCurrentArray
     *
     *  @param \ManagerBundle\Entity\PMCurrentArray $currentArray
     */
    public function removeEventsCurrentArray(\ManagerBundle\Entity\PMCurrentArray $eventsCurrentArray)
    {
        $this->events_currentArrays->removeElement($eventsCurrentArray);
    }

    /**
     * Get eventsCurrentArrays
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getEventsCurrentArrays()
    {
        return $this->events_currentArrays;
    }

    /**
     * Set seq
     *
     * @param \ManagerBundle\Entity\PMSeq $seq
     *
     * @return PMEvent
     */
    public function setSeq(\ManagerBundle\Entity\PMSeq $seq = null)
    {
        $this->seq = $seq;

        return $this;
    }

    /**
     * Get seq
     *
     * @return \ManagerBundle\Entity\PMSeq
     */
    public function getSeq()
    {
        return $this->seq;
    }

    /**
     * Set status
     *
     * @param \ManagerBundle\Entity\PMStatus $status
     *
     * @return PMEvent
     */
    public function setStatus(\ManagerBundle\Entity\PMStatus $status = null)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Get status
     *
     * @return \ManagerBundle\Entity\PMStatus
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Set action
     *
     * @param \ManagerBundle\Entity\PMAction $action
     *
     * @return PMEvent
     */
    public function setAction(\ManagerBundle\Entity\PMAction $action = null)
    {
        $this->action = $action;

        return $this;
    }

    /**
     * Get action
     *
     * @return \ManagerBundle\Entity\PMAction
     */
    public function getAction()
    {
        return $this->action;
    }

    /**
     * Add eventsContributor
     *
     * @param \ManagerBundle\Entity\PMEventsContributors $eventsContributor
     *
     * @return PMEvent
     */
    public function addEventsContributor(\ManagerBundle\Entity\PMEventsContributors $eventsContributor)
    {
        $this->events_contributors[] = $eventsContributor;

        return $this;
    }

    /**
     * Remove eventsContributor
     *
     * @param \ManagerBundle\Entity\PMEventsContributors $eventsContributor
     */
    public function removeEventsContributor(\ManagerBundle\Entity\PMEventsContributors $eventsContributor)
    {
        $this->events_contributors->removeElement($eventsContributor);
    }

    /**
     * Get eventsContributors
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getEventsContributors()
    {
        return $this->events_contributors;
    }

    /**
     * Set createdBy
     *
     * @param string $createdBy
     *
     * @return PMEvent
     */
    public function setCreatedBy($createdBy)
    {
        $this->createdBy = $createdBy;

        return $this;
    }

    /**
     * Get createdBy
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->createdBy;
    }

    /**
     * Set finished
     *
     * @param boolean $finished
     *
     * @return PMEvent
     */
    public function setFinished($finished)
    {
        $this->finished = $finished;

        return $this;
    }

    /**
     * Get finished
     *
     * @return boolean
     */
    public function getFinished()
    {
        return $this->finished;
    }
}
