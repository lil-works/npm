<?php

namespace ManagerBundle\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * Instrument
 *
 * @ORM\Table()
 * @ORM\Entity(repositoryClass="ManagerBundle\Entity\InstrumentRepository")
 */
class Instrument
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer")
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    private $id;

    /**
     * @ORM\OneToMany(targetEntity="ManagerBundle\Entity\InstrumentString", mappedBy="instrument",cascade={"persist", "remove"})
     */
    protected $instrumentString;

    /**
     * @ORM\OneToMany(targetEntity="ManagerBundle\Entity\Neck", mappedBy="instrument",cascade={"persist", "remove"})
     */
    protected $neck;

    /**
     * @ORM\OneToMany(targetEntity="Fingering", mappedBy="instrument")
     */
    protected $fingerings;


    /**
     * @var string
     *
     * @ORM\Column(name="published", type="boolean",nullable=true)
     */
    private $published;


    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=50)
     */
    private $name;
    /**
     * @var string
     *
     * @ORM\Column(name="tuningName", type="string", length=50)
     */
    private $tuningName;

    /**
     * @var integer
     *
     * @ORM\Column(name="nbrCases", type="integer")
     */
    private $nbrCases;

    /**
     * @var integer
     *
     * @ORM\Column(name="nbrMaxCases", type="integer")
     */
    private $nbrMaxCases;

    /**
     * @var integer
     *
     * @ORM\Column(name="icon", type="string",length=100)
     */
    private $icon;

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set published
     *
     * @param boolean $published
     *
     * @return Instrument
     */
    public function setPublished($published)
    {
        $this->published = $published;

        return $this;
    }

    /**
     * Get published
     *
     * @return boolean
     */
    public function getPublished()
    {
        return $this->published;
    }

    /**
     * Set name
     *
     * @param string $name
     *
     * @return Instrument
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set nbrCases
     *
     * @param integer $nbrCases
     *
     * @return Instrument
     */
    public function setNbrCases($nbrCases)
    {
        $this->nbrCases = $nbrCases;

        return $this;
    }

    /**
     * Get nbrCases
     *
     * @return integer
     */
    public function getNbrCases()
    {
        return $this->nbrCases;
    }

    /**
     * Set nbrMaxCases
     *
     * @param integer $nbrMaxCases
     *
     * @return Instrument
     */
    public function setNbrMaxCases($nbrMaxCases)
    {
        $this->nbrMaxCases = $nbrMaxCases;

        return $this;
    }

    /**
     * Get nbrMaxCases
     *
     * @return integer
     */
    public function getNbrMaxCases()
    {
        return $this->nbrMaxCases;
    }

    /**
     * Set icon
     *
     * @param string $icon
     *
     * @return Instrument
     */
    public function setIcon($icon)
    {
        $this->icon = $icon;

        return $this;
    }

    /**
     * Get icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->icon;
    }

    /**
     * Set tuningName
     *
     * @param string $tuningName
     *
     * @return Instrument
     */
    public function setTuningName($tuningName)
    {
        $this->tuningName = $tuningName;

        return $this;
    }

    /**
     * Get tuningName
     *
     * @return string
     */
    public function getTuningName()
    {
        return $this->tuningName;
    }
    /**
     * Constructor
     */
    public function __construct()
    {
        $this->instrumentString = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Add instrumentString
     *
     * @param \ManagerBundle\Entity\InstrumentString $instrumentString
     *
     * @return Instrument
     */
    public function addInstrumentString(\ManagerBundle\Entity\InstrumentString $instrumentString)
    {
        $this->instrumentString[] = $instrumentString;

        return $this;
    }

    /**
     * Remove instrumentString
     *
     * @param \ManagerBundle\Entity\InstrumentString $instrumentString
     */
    public function removeInstrumentString(\ManagerBundle\Entity\InstrumentString $instrumentString)
    {
        $this->instrumentString->removeElement($instrumentString);
    }

    /**
     * Get instrumentString
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getInstrumentString()
    {
        return $this->instrumentString;
    }

    /**
     * Add neck
     *
     * @param \ManagerBundle\Entity\Neck $neck
     *
     * @return Instrument
     */
    public function addNeck(\ManagerBundle\Entity\Neck $neck)
    {
        $this->neck[] = $neck;

        return $this;
    }

    /**
     * Remove neck
     *
     * @param \ManagerBundle\Entity\Neck $neck
     */
    public function removeNeck(\ManagerBundle\Entity\Neck $neck)
    {
        $this->neck->removeElement($neck);
    }

    /**
     * Get neck
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getNeck()
    {
        return $this->neck;
    }

    /**
     * Add fingering
     *
     * @param \ManagerBundle\Entity\Fingering $fingering
     *
     * @return Instrument
     */
    public function addFingering(\ManagerBundle\Entity\Fingering $fingering)
    {
        $this->fingerings[] = $fingering;

        return $this;
    }

    /**
     * Remove fingering
     *
     * @param \ManagerBundle\Entity\Fingering $fingering
     */
    public function removeFingering(\ManagerBundle\Entity\Fingering $fingering)
    {
        $this->fingerings->removeElement($fingering);
    }

    /**
     * Get fingerings
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getFingerings()
    {
        return $this->fingerings;
    }

    public function getTuningInArray()
    {
        $o = array();
        foreach($this->getInstrumentString() as $is){
            $o[$is->getPos()]=$is->getTone();
        }
        return $o;
    }
}
