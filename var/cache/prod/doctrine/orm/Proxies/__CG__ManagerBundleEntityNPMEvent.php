<?php

namespace Proxies\__CG__\ManagerBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class NPMEvent extends \ManagerBundle\Entity\NPMEvent implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'id', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'created', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'creator', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'start', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'stop', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'notFinished', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'closed', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'description', 'events_currentArrays', 'events_elements', 'events_states', 'events_actions', 'events_contributors'];
        }

        return ['__isInitialized__', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'id', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'created', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'creator', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'start', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'stop', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'notFinished', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'closed', '' . "\0" . 'ManagerBundle\\Entity\\NPMEvent' . "\0" . 'description', 'events_currentArrays', 'events_elements', 'events_states', 'events_actions', 'events_contributors'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (NPMEvent $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($created)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$created]);

        return parent::setCreated($created);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setStart($start)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStart', [$start]);

        return parent::setStart($start);
    }

    /**
     * {@inheritDoc}
     */
    public function getStart()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStart', []);

        return parent::getStart();
    }

    /**
     * {@inheritDoc}
     */
    public function setStop($stop)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStop', [$stop]);

        return parent::setStop($stop);
    }

    /**
     * {@inheritDoc}
     */
    public function getStop()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStop', []);

        return parent::getStop();
    }

    /**
     * {@inheritDoc}
     */
    public function setNotFinished($notFinished)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNotFinished', [$notFinished]);

        return parent::setNotFinished($notFinished);
    }

    /**
     * {@inheritDoc}
     */
    public function getNotFinished()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNotFinished', []);

        return parent::getNotFinished();
    }

    /**
     * {@inheritDoc}
     */
    public function setClosed($closed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setClosed', [$closed]);

        return parent::setClosed($closed);
    }

    /**
     * {@inheritDoc}
     */
    public function getClosed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClosed', []);

        return parent::getClosed();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreator(\AppBundle\Entity\User $creator = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreator', [$creator]);

        return parent::setCreator($creator);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreator()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreator', []);

        return parent::getCreator();
    }

    /**
     * {@inheritDoc}
     */
    public function addEventsCurrentArray(\ManagerBundle\Entity\NPMEventsCurrentArrays $eventsCurrentArray)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEventsCurrentArray', [$eventsCurrentArray]);

        return parent::addEventsCurrentArray($eventsCurrentArray);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEventsCurrentArray(\ManagerBundle\Entity\NPMEventsCurrentArrays $eventsCurrentArray)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEventsCurrentArray', [$eventsCurrentArray]);

        return parent::removeEventsCurrentArray($eventsCurrentArray);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventsCurrentArrays()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventsCurrentArrays', []);

        return parent::getEventsCurrentArrays();
    }

    /**
     * {@inheritDoc}
     */
    public function addEventsElement(\ManagerBundle\Entity\NPMEventsElements $eventsElement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEventsElement', [$eventsElement]);

        return parent::addEventsElement($eventsElement);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEventsElement(\ManagerBundle\Entity\NPMEventsElements $eventsElement)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEventsElement', [$eventsElement]);

        return parent::removeEventsElement($eventsElement);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventsElements()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventsElements', []);

        return parent::getEventsElements();
    }

    /**
     * {@inheritDoc}
     */
    public function addEventsState(\ManagerBundle\Entity\NPMEventsStates $eventsState)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEventsState', [$eventsState]);

        return parent::addEventsState($eventsState);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEventsState(\ManagerBundle\Entity\NPMEventsStates $eventsState)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEventsState', [$eventsState]);

        return parent::removeEventsState($eventsState);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventsStates()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventsStates', []);

        return parent::getEventsStates();
    }

    /**
     * {@inheritDoc}
     */
    public function addEventsAction(\ManagerBundle\Entity\NPMEventsActions $eventsAction)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEventsAction', [$eventsAction]);

        return parent::addEventsAction($eventsAction);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEventsAction(\ManagerBundle\Entity\NPMEventsActions $eventsAction)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEventsAction', [$eventsAction]);

        return parent::removeEventsAction($eventsAction);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventsActions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventsActions', []);

        return parent::getEventsActions();
    }

    /**
     * {@inheritDoc}
     */
    public function addEventsContributor(\ManagerBundle\Entity\NPMEventsContributors $eventsContributor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEventsContributor', [$eventsContributor]);

        return parent::addEventsContributor($eventsContributor);
    }

    /**
     * {@inheritDoc}
     */
    public function removeEventsContributor(\ManagerBundle\Entity\NPMEventsContributors $eventsContributor)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeEventsContributor', [$eventsContributor]);

        return parent::removeEventsContributor($eventsContributor);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventsContributors()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEventsContributors', []);

        return parent::getEventsContributors();
    }

}
